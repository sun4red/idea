[1번 문제] <네트워크>

문제 : 하나의 자율 시스템 내의 라우팅에 사용되는 프로토콜
답 : IGP, Interior Gateway Protocol


[2번 문제] <디자인 패턴>

문제 : Decorator
답 : 객체 간의 결합을 통해 능동적으로 기능들을 확장
임의의 객체에 부가적인 기능을 추가하기 위해 다른 객체들을 덧붙이는 방식으로 구현


[3번 문제] <보안>

문제 : SYN Flooding
답 : 3-way-handshaking 과정을 의도적으로 중단, 서버가 대기상태에 놓여 정상적인 서비스 수행 불가


[4번 문제] <디자인 패턴>

문제 : Prototype
답 : 원본 객체를 복제하는 방법
일반적인방법으로 객체 생성, 비용이 큰 경우 주로 이용


[5번 문제] <공격 기법>

문제 : ARP Spoofing
답 : ARP의 취약점을 이용, 자신의 물리적 주소(MAC)를 공격대상의 것으로 변조, 데이터 패킷을 가로채거나 방해하는 기법


[6번 문제] <프로세스>

문제 : 선점 스케줄링(Preemptive)
답 : 우선순위가 높은 다른 프로세스가 CPU를 강제로 빼앗아 사용할 수 있는 기법


[7번 문제] <프로세스>

문제 : 시간 할당량 만큼만 실행한 후 완료되지 않으면 다음 프로세스에게 CPU를 넘겨줌
할당되는 시간이 클 경우 : FCFS 기법과 같아짐, 할당되는 시간이 작을 경우 : 문맥교환, 오버헤드가 많아지고 신속히 처리되지 않음
답 : RR
(Round Robin)


[8번 문제] <OSI 참조 모델>

문제 : Bridge
답 : LAN과 LAN을 연결하거나
LAN안에서의 컴퓨터 그룹을 연결하는 장치


[9번 문제] <DB>

문제 : RBAC
답 : 사용자의 역할에 따라 접근 권한 부여


[10번 문제] <보안>

문제 : Ping of Death
답 : 패킷의 크기를 허용 범위 이상으로 전송(ICMP 패킷), 네트워크 마비시키는 서비스 거부공격 큰 패킷 → 대량의 분할된 패킷 재조립 부담, 각각의 ICMP Ping 메시지에 응답처리, 시스템 다운


[11번 문제] <UML>

문제 : 클래스나 컴포넌트가 복합구조를 갖는 경우
답 : 복합체 구조 다이어그램
(Composite Structure Diagram)


[12번 문제] <UML>

문제 : 하나의 객체가 자신이 속한 클래스의 상태 변화 혹은 다른 객체와의 상호작용에 따라 상태가 어떻게 변화하는지를 표현
럼바우 객체지향 분석 기법에서 동적 모델링에 활용
답 : 상태 다이어그램
(State Diagram)


[13번 문제] <OSI 참조 모델>

문제 : DNS
답 : 문자로 된 도메인 네임을 컴퓨터가 이해할 수 있는 IP주소로 변환하는 역할


[14번 문제] <UML>

문제 : 할 수 있거나 해야 하는 기능. 서로를 그룹화 할 수 있는 관계
답 : 실체화관계


[15번 문제] <OSI 참조 모델>

문제 : 응용프로그램이 통신망에 연동, 정보교환 시작
답 : 응용 계층
(Application)


[16번 문제] <RAID>

문제 : 스트라이핑(Striping)

디스크를 병렬로 연결하여 디스크의 개수만틈 용량과 속도가 배로 증가

하나의 디스크만 손상되어도 전체 데이터가 파손
답 : RAID 0


[17번 문제] <DB>

문제 : 삭제 이상(Deletion Anomaly)
답 : 튜플을 삭제할 때 의도와는 상관없는 값들도 함께 삭제되는, 연쇄 삭제가 발생하는 현상


[18번 문제] <모듈>

문제 : 순차적 응집도
(Sequential Cohesion)
답 : 모듈 내 하나의 활동으로부터 나온 출력 데이터를 그다음 활동의 입력 데이터로 사용할 경우


[19번 문제] <소프트웨어 패키징>

문제 : SCM, Software Configuration Management
답 : 개발 과정에서 소프트웨어의 변경 사항을 관리하기 위해 개발된 일련의 활동

소프트웨어 개발 단계의 각 과정에서 만들어지는 프로그램, 프로그램을 설명하는 문서, 데이터 등을 관리하는 것

소프트웨어의 개발 과정에서 만들어지는 여러 버전들의 변경사항을 관리하는 일련의 활동

대표적인 형상 관리 도구 : Git, SVN, CVS


[20번 문제] <OSI 참조 모델>

문제 : 데이터링크 계층
(Data Link)
답 : 물리 계층의 통신매체를 통해 발생하는 데이터 블록의 송수신 간의 에러에 대한 검출 및 제어 관리


[21번 문제] <공격 기법>

문제 : 내부 문서나 파일등을 암호화해 사용자가 열지 못하게 하는 프로그램
답 : 랜섬웨어(Ransomeware)


[22번 문제] <모듈>

문제 : 한 모듈이 다른 모듈의 내부 기능 및 그 내부 자료를 직접 참조하거나 수정할 때
답 : 내용 결합도
(Content Coupling)


[23번 문제] <보안>

문제 : N-NASH
답 : 일본의 전신전화 주식회사(NTT)의 암호화 해시 함수

블록크기, 키 길이 모두 128비트


[24번 문제] <DB>

문제 : 트랜잭션의 지속성
답 : 성공적으로 완료된 트랜잭션의 결과는 시스템이 고장나도 영구 반영


[25번 문제] <네트워크>

문제 : 정지-대기(Stop and Wait)
답 : 수신 측 확인(ACK)를 받은 후 다음패킷 전송


[26번 문제] <UI, UX>

문제 : NUI (Natural User Interface)
답 : 사용자의 말이나 행동 등으로 기기 조작


[27번 문제] <디자인 패턴>

문제 : Command
답 : 요청을 캡슐화하여 재이용하거나 취소할 수 있도록 요청에 필요한 정보를 저장하거나 로그에 남김


[28번 문제] <소프트웨어 패키징>

문제 : 모듈별로 생성한 실행 파일을 묶어 배포용 설치 파일을 만드는 것

개발자가 아니라 사용자 중심으로 진행

소스 코드는 향후 관리를 고려하여 모듈화하여 패키징
답 : 소프트웨어 패키징


[29번 문제] <모듈>

문제 : 우연적 응집도
(Coinfidental Cohesion)
답 : 모듈 내부의 각 구성 요소들이 서로 관련 없는 요소로만 구성


[30번 문제] <디자인 패턴>

문제 : 작게 분리된 인스턴스를 건축 하듯이 조합하여 객체 생성
답 : Builder


[31번 문제] <소프트웨어 개발 모형>

문제 : XP의 주요 실천방법
답 : Pair Programming
(짝 프로그래밍)
Whole Team
(전체 팀)
Collective Ownership
(공동 코드 소유)
Continuous Integration
(계속적인 통합)
Test-Driven Development
(테스트 주도 개발)
Refactoring
(리팩토링)
Small Releases
(소규모 릴리즈)


[32번 문제] <공격 기법>

문제 : 상호 인증과정을 거친 후 접속해 있는 서버와 클라이언트 사이의 세션정보를 가로채는 공격 기법
답 : Session Hijacking


[33번 문제] <UML>

문제 : 사용자의 요구를 분석하는 것으로, 기능 모델링 작업에 사용
사용자(Actor)와 사용 사례(Use Case)로 구성
답 : 유스케이스 다이어그램
(Use Case Diagram)


[34번 문제] <보안솔루션>

문제 : 정보자산을 안전하게 보호하기위한 보호절차와 대책, 한국인터넷진흥원(KISA)에서 운영
답 : 정보보호관리체계(ISMS, Information Security Management System)


[35번 문제] <프로세스>

문제 : 시스템의 여러자원을 할당받아 실행하는 프로그램의 단위

프로세스의 일부 특성을 가져 경량프로세스라고도 함
답 : 스래드(Thread)


[36번 문제] <보안>

문제 : 웹 응용프로그램에 SQL을 삽입하여 내부 DB서버의 데이터를 유출, 변조, 관리자 인증 우회

동적쿼리에 사용되는 입력 데이터에 예약어 및 특수문자가 입력되지않도록 설정하여 방지
답 : SQL Injection


[37번 문제] <공격 기법>

문제 : 주소를 잘못입력하는 실수를 이용, 유사한 도메인을 미리 등록(URL하이재킹)
답 : 타이포스쿼팅(Typosquatting)


[38번 문제] <애플리케이션 성능 측정 지표>

문제 : 요청 전달 부터 응답 도착 까지의 시간
답 : 응답 시간 (Response TIme)


[39번 문제] <소프트웨어 패키징>

문제 : 형상 기록
답 : 형상의 식별, 통제, 감사 작업의 결과를 기록 · 관리하고 보고서를 작성하는 작업


[40번 문제] <디자인 패턴>

문제 : 서브 클래스들 사이의 통합 인터페이스를 제공하는 Wrapper 객체가 필요
복잡한 서브클래스들을 피해 더 상위에 인터페이스를 구성, 서브클래스들의 기능을 간편하게 사용할 수 있도록 하는 패턴
답 : Façade


[41번 문제] <보안>

문제 : HTTPS(HyperText Transfer Protocol Secure)
답 : 웹브라우저-서버 간 안전한 통신


[42번 문제] <보안>

문제 : 분산된 공격 지점에서 한 곳의 서버에 대해 서비스 거부 공격

취약점이 있는 호스트들을 탐색 후 서비스 공격용 툴(Demon)을 설치, 에이전트로 만든 후 DDoS공격에 이용
답 : DDoS 공격(Distributed Denial of Service)


[43번 문제] <디자인 패턴>

문제 : Interpreter
답 : 언어에 문법 표현을 정의


[44번 문제] <공격 기법>

문제 : 네트워크의 중간에서 남의 패킷 정보를 도청
답 : Sniffing


[45번 문제] <애플리케이션 테스트>

문제 : 통합 테스트로 인해 변경된 모듈이나 컴포넌트에 새로운 오류가 있는지 확인하는 테스트

이미 테스트 된 프로그램의 테스팅을 반복
답 : 회귀 테스트 (Regression Test)


[46번 문제] <디자인 패턴>

문제 : Flyweight
답 : 인스턴스가 필요할 때 가능한 공유해서 사용함으로써 메모리를 절약하는 패턴
다수의 유사 객체를 생성하거나 조작할 때 유용


[47번 문제] <보안>

문제 : RSA(Rivest Shamir Adelman)
답 : 공개키 암호화 알고리즘, 큰 숫자 소인수분해하기 어렵다는 것에 기반


[48번 문제] <DB>

문제 : NAS
답 : 서버 - 저장장치 네트워크로 연결, 별도의 파일 관리 가능


[49번 문제] <프로세스>

문제 : 프로그램이나 데이터를 어디에 위치 시킬 것 인지를 결정하는 전략
답 : 배치 전략(Placement)


[50번 문제] <프로세스>

문제 : 가상기억장치(Virtual Memory)
답 : 보조기억장치의 일부를 주기억장치처럼 사용하는 것

용량이 작은 주기억장치를 큰 용량을 가진 것처럼 사용하는 기법


[51번 문제] <UML>

문제 : 배치 다이어그램
(Deployment Diagram)
답 : 결과물, 프로세스, 컴포넌트 등 물리적 요소들의 위치 표현


[52번 문제] <보안솔루션>

문제 : 웹 방화벽(Web Firewall)
답 : 웹 기반 공격(SQL삽입공격, XSS) 방어할 목적


[53번 문제] <보안>

문제 : IP나 ICMP 특성 악용하여 엄청난 양의 데이터를 한 사이트에 집중적으로 보냄으로 써 네트워크를 불능 상태로 만드는 공격 무력화 방법 : 네트워크 라우터에서 브로드캐스트주소를 사용할 수 없게 미리 설정
답 : SMURFING


[54번 문제] <보안>

문제 : DES(Data Encryption Standard)
답 : 미국 NBS에서 발표한 개인키 암호화 알고리즘, 블록크기 64비트, 길이 56비트, 16회 라운드 수행


[55번 문제] <디자인 패턴>

문제 : 인터페이스를 통해 서로 연관, 의존하는 객체들의 그룹으로 생성하여 추상적으로 표현
답 : Abstract Factory


[56번 문제] <애플리케이션 테스트>

문제 : 화이트박스 테스트
답 : 원시코드의 논리적인 모든 경로 테스트

모든 문장 한번 이상 실행


[57번 문제] <네트워크>

문제 : 수신 통지 이용, 미리 정해징 패킷 수 연속 전송

약속된 최대 패킷 수 : Window Size)
답 : 슬라이딩 윈도우(Sliding Window)


[58번 문제] <보안>

문제 : MD4개선, 블록 길이 512비트, 키 길이 128비트, 암호화 해시

각 512비티 입력메시지 블록 처리 후 128비트 스테이트 값 변화
답 : MDS


[59번 문제] <네트워크>

문제 : 가상 회선 방식(연결형 통신)
답 : 송신지와 수신지 사이의 연결을 확립, 설정된 경로를 따라 패킷들을 순서적으로 운반


[60번 문제] <공격 기법>

문제 : 웹사이트를 사전에 감염시켜 해당 사이트에 방문했을 때 악성코드에 감염되게 하는 웹 기반 공격

감염된 PC를 기반으로 대상이 속한 시스템 접근
답 : Watering Hole


[61번 문제] <RAID>

문제 : RAID 6
답 : RAID 5와 원리는 같으나 오류 정정 부호 2개를 저장하는 방식

두 개의 디스크가 손상되어도 정상 가동이 가능하며 최소 4개의 디스크가 필요하다.


[62번 문제] <객체 지향>

문제 : 자료흐름도

다수 프로세스 간의 자료흐름을 중심으로 처리과정 표현
답 : 기능 모델링 (Function)


[63번 문제] <프로세스>

문제 : 프로그램을 일정한 크기로 나눈 단위
답 : Page


[64번 문제] <보안>

문제 : Secure OS
답 : 운영체제에 보안 기능을 갖춘 커널(Kernel)을 이식, 외부의 침입으로 부터 시스템 자원을 보호


[65번 문제] <디자인 패턴>

문제 : Mediator
답 : 복잡한 상호작용을 캡슐화하여 객체로 정의
객체 사이의 의존성을 줄여 결합도를 감소


[66번 문제] <소프트웨어 패키징>

문제 : 클라이언트/서버 방식
답 : 버전 관리 자료가 서버에 저장되어 관리 되는 방식

서버에 문제가 생기면 서버가 복구되기 전까지 다른 개발자와의 협업 및 버전 관리 작업은 중단

종류 : CVS, SVN(Subersion), CVSNT, Clear Case, CMVC, Perforce 등


[67번 문제] <보안>

문제 : TKIP(Temporal Key Integrity Protocol)
답 : WEP의 취약성을 보완한 데이터 보안 프로토콜, 암호입력 키 길이 128비트, 패킷당 키 할당, 재설정등 관리방식 개선


[68번 문제] <객체 지향>

문제 : 의존관계 성립 시 추상성이 높은 클래스와 의존관계를 맺음
답 : DIP


[69번 문제] <보안>

문제 : 국가안전보장국(NSA)에서 개발한 암호화 알고리즘, 클리퍼칩(IC칩)에 내장, 블록크리 64비트, 키 길이 80비트 주로 음성통신장비에 삽입, 음성데이터 암호화
답 : Skipjack


[70번 문제] <보안솔루션>

문제 : 방화벽(Firewall)
답 : 조직 내부의 네트워크와 인터넷 간에 전송되는 정보를 선별하여 수용, 거부, 수정하는 침입차단 시스템

내부 네트워크에서 외부로 나가는 패킷은 그대로 통과, 외부에서 내부 네트워크로 들어오는 패킷은 내용을 엄밀히 체크하여 인증된 패킷만 통과


[71번 문제] <DB>

문제 : 테이블에서 튜플에 있는 속성 값을 갱신할 때 일부 튜플의 정보만 갱신되어 정보에 불일치성(Inconsistency)이 생기는 현상
답 : 갱신 이상(Update Anomaly)


[72번 문제] <애플리케이션 테스트>

문제 : 소스코드 모든 구문 한번 이상 수행
답 : 문장검증기준 Statement Coverage


[73번 문제] <객체 지향>

문제 : 시스템에서 요구되는객체

속성과 연산 식별 및 객체들 간의 관계 규정, 객체 다이어그램으로 표시
답 : 객체 모델링 (Information)


[74번 문제] <UML>

문제 : 상호작용 개요 다이어그램
(Interaction Overview Diagram)
답 : 상호작용 다이어그램 간의 제어 흐름 표현


[75번 문제] <모듈>

문제 : 모듈 내부의 모든 기능 요소들이 단일 문제와 연관되어 수행
답 : 기능적 응집도
(Functional Cohesion)


[76번 문제] <네트워크>

문제 : NAT, Network Address Translation
답 : 한 개의 정식 IP주소에 대량의 가상 사설IP주소를 할당 및 연결하는 기능

1개의 IP주소를 사용해서 외부에 접속할 수 있는 노드는 어느 시점에서 1개 만으로 제한되는 문제가 있으나 IP마스커레이드(Masquerade)를 이용, 해결


[77번 문제] <자료흐름도>

문제 : 요구사항 분석에서 자료의 흐름 및 변환 과정과 기능을 도형 중심으로 기술하는 방법

자료흐름과 처리를 중심으로 하는 구조적 분석기법에 이용(자료흐름 그래픔, 버블차트)
답 : DFD, Data Flow Diagram


[78번 문제] <공격 기법>

문제 : 백도어(Back Door, Trap Door)
답 : 시스템 설계자의 액세스 편의를 위해 시스템 보안을 제거하여 만들어놓은 비밀통로


[79번 문제] <DB>

문제 : 트랙잭션이 부분 완료되기 전이라도 즉시 데이터베이스 반영
답 : 즉각 갱신 기법


[80번 문제] <네트워크>

문제 : 프로토콜
답 : 다른 기기들 간의 데이터 교환을 원활하게 수행할 수 있도록 표준화 시켜놓은 통신 규약


[81번 문제] <모듈>

문제 : 모듈 간의 인터페이스로 배열이나 레코드 등의 자료 구조가 전달
답 : 스탬프 결합도
(Stamp Coupling)


[82번 문제] <프로세스>

문제 : 단편화를 가장 많이 남기는 영역에 배치
답 : 최악 적합(Worst Fit)


[83번 문제] <UML>

문제 : 구현 단계에서 사용, 실제 구현 모델인 컴포넌트 간의 관계나 인터페이스 표현
답 : 컴포넌트 다이어그램
(Component Diagram)


[84번 문제] <OSI 참조 모델>

문제 : ARP
답 : 호스트의 IP 주소를 호스트와 연결된 네트워크 접속장치의 물리적 주소(MAC Address)로 변환


[85번 문제] <프로세스>

문제 : 비선점 스케줄링(Non-Preemptive)
답 : 이미 할당된 CPU를 다른 프로세서가 강제로 뺏을 수 없음(일괄처리 방식에 적합)


[86번 문제] <OSI 참조 모델>

문제 : 물리 계층
(Physical)
답 : 통신 하드웨어 단말 간의 물리적인 접속을 연결, 제어 기능, 규칙을 정의


[87번 문제] <모듈>

문제 : 어떤 모듈이 다른 모듈 내부의 논리적인 흐름을 제어하기 위해 제어 신호나 제어 요소를 전달
하위 모듈에서 상위 모듈로 제어 신호가 이동하여 하위 모듈이 상위 모듈에게 처리 명령을 내리는 권리 전도 현상 발생
답 : 제어 결합도
(Control Coupling)


[88번 문제] <보안>

문제 : 기밀성(Confidentiality)
답 : 인가된 사용자에게만 접근이 허용, 정보 전송 중 노출되어도 읽을 수 없음


[89번 문제] <객체 지향>

문제 : 캡슐화

세부내용 은닉

결합도 ▼, 재사용성 ▲, 단순화

상속

상위클래스의 모든 속성과 연산을 하위클래스가 물려받음

다형성

하나의 메시지에 대해 각각의 객체가 고유한 방법으로 응답

연관성
답 : 특징


[90번 문제] <보안>

문제 : 미국표준기술연구소(NIST)에서 발표한 개인키 알고리즘, 블록크기 128비트, 길이에 따라 분류
답 : AES(Advanced Encryption Standard)


[91번 문제] <프로세스>

문제 : 프로그램을 배열이나 함수 등과 같은 논리적인 크기로 나눈 단위
답 : Segment


[92번 문제] <프로세스>

문제 : 운영체제가 프로세스에 대한 중요한 정보를 저장해놓는 곳
답 : PCB(Process Control Block)


[93번 문제] <디자인 패턴>

문제 : 객체 생성을 서브클래스에서 처리하도록 분리하여 캡슐화
상위 클래스에서 인터페이스만 정의, 실제 생성은 서브 클래스가 담당
답 : Factory Method


[94번 문제] <UML>

문제 : 순차 다이어그램
(Sequence Diagram)
답 : 상호작용하는 시스템이나 객체들이 주고받는 메시지를 표현


[95번 문제] <UML>

문제 : 타이밍 다이어그램
(Timing Diagram)
답 : 객체 상태 변화와 시간 제약을 명시적으로 표현


[96번 문제] <소프트웨어 패키징>

문제 : 버전 관리 자료가 지역 컴퓨터의 공유 폴더에 저장되어 관리 되는 방식

파일의 변경 사항을 데이터베이스에 기록하여 관리

종류 : SCCS, RCS, PVCS, QVCS 등
답 : 공유 폴더 방식


[97번 문제] <프로세스>

문제 : 요구 반입(Demand Fetch)
답 : 실행 중인 프로그램이 특정 프로그램이나 데이터 등의 참조를 요구할 때 적재하는 방법


[98번 문제] <디자인 패턴>

문제 : Composite
답 : 여러 객체를 가진 복합 객체와 단일 객체를 구분 없이 다루고자 할 때 사용
객체들을 트리 구조로 구성하여 디렉터리 안에 디렉터리가 있듯이 복합 객체 안에 복합 객체가 포함되는 구조를 구현할 수 있음


[99번 문제] <요구사항>

문제 : HIPO (Hierarchy Input Process Output)
답 : 시스템 실행과정인 입력, 처리, 출력의 기능 표현

하향식 소프트웨어 개발을 위한 문서화 도구

시스템의 기능을 여러개의 고유모듈로 분할, 이들 간의 인터페이스를 계층구조로 표현 (HIPO Chart)


[100번 문제] <보안솔루션>

문제 : 네트워크에 접속하는 내부 PC의 MAC주소를 IP관리시스템에 등록 후 일관된 보안관리 기능 제공 보안솔루션, 내부 PC의 SW사용현황 관리, 불법 SW설치 방지
답 : NAC(Network Access Control)


